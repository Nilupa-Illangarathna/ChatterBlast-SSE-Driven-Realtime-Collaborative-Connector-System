<!-- views/admin-ui.ejs -->
<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Admin UI</title>
</head>

<body>
  <h1>Welcome <%= username %> to the Admin UI</h1>

  <!-- Room Details -->
  <p>This is Admin's room</p>
  <p>Admin: <%= username %>
  </p>

  <p>Room URL: <%= roomData.room_url %>
  </p>
  <p>Room Creator: <%= roomData.room_creator_username %>
  </p>
  <p>Joiners: <%= roomData.joiners %>
  </p>
  <p>Sequence: <%= roomData.sequence %>
  </p>

  <!-- Copy URL Button -->
  <button onclick="copyToClipboard('<%= roomData.room_url %>')">Copy URL</button>

  <!-- Messaging Form -->
  <form id="adminForm" action="/send-message" method="POST">
    <label for="message">Send Message:</label>
    <input type="text" id="message" name="message" required>
    <button type="submit">Send</button>
  </form>

  <!-- Display Messages -->
  <ul id="messages"></ul>

  <script>
    // Use JavaScript to handle form submission asynchronously
    document.addEventListener('DOMContentLoaded', () => {
      const adminForm = document.getElementById('adminForm');

      adminForm.addEventListener('submit', async (event) => {
        event.preventDefault(); // Prevent the default form submission behavior

        const formData = new FormData(adminForm);
        const message = formData.get('message');

        try {
          const response = await fetch('/send-message', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ username: '<%= username %>', message }),
          });

          if (!response.ok) {
            throw new Error(`Error sending message: ${response.statusText}`);
          }

          console.log('Message sent successfully.');

          // You can perform additional actions based on the response if needed

        } catch (error) {
          console.error(`Error sending message: ${error.message}`);
        }
      });
    });

    // Function to copy URL to clipboard
    function copyToClipboard(url) {
      const el = document.createElement('textarea');
      el.value = url;
      document.body.appendChild(el);
      el.select();
      document.execCommand('copy');
      document.body.removeChild(el);
      // alert('URL copied to clipboard!');
    }
  </script>
  <script>
    function decodeHtmlEntities(html) {
      var txt = document.createElement('textarea');
      txt.innerHTML = html;
      return txt.value;
    }

    const eventSource = new EventSource('/sse');

    eventSource.onmessage = async (event) => {
      const eventData = JSON.parse(event.data);
      if (eventData.action === 'newJoiner') {
        console.log(`New joiner option`);
        // Check if the URLs match before printing to the console
        if (eventData.url === decodeHtmlEntities('<%= roomData.room_url %>')) {
          console.log(`New joiner: ${eventData.username}`);

          // Retry fetching the updated roomData after a timeout if it's still undefined
          if (!roomData) {
            await new Promise(resolve => setTimeout(resolve, 4000)); // 4 seconds timeout
            // Fetch the updated room data here
            // roomData = ...
            console.log('Retrying to fetch updated roomData after timeout...');

            // If roomData is still undefined after the timeout, you can handle it accordingly
            if (!roomData) {
              console.log('Room data is still undefined after timeout.');
              return;
            }
          }

          // Now you can use the updated roomData
          console.log('Using updated roomData:', roomData);
        } else {
          console.log(`Not equal: ${eventData.url} and <%= roomData.room_url %>`);
        }
      }
    };


    eventSource.onerror = (error) => {
      console.error('SSE Error:', error);
      eventSource.close();
    };
  </script>

</body>

</html>