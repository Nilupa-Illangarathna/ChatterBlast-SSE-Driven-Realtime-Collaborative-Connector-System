<!-- views/admin-ui.ejs -->
<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <title>Admin UI</title>
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-4bw+/aepP/YC94hEpVNVgiZdgIC5+VKNBQNGCHeKRQN+PtmoHDEXuppvnDJzQIu9" crossorigin="anonymous">
  <style>
    /* Apply eye-catching and adaptable font styles */
    .zoomed-out-container {
      zoom: 0.8;
    }

    body {
      background-color: #928888b0;
      display: flex;
      font-family: Arial, sans-serif;
      /* Use a widely available font family */
      color: #333;
      /* Set a default text color */
    }

    .left-container {
      width: 70%;
      padding: 40px;
    }

    .right-container {
      width: 30%;
      padding: 40px;
      background-color: #fff;
      height: 100vh;
    }

    .tile-container {
      display: flex;
      flex-wrap: wrap;
      margin: -20px;
    }

    .tile {
      width: calc(30% - 20px);
      height: 0;
      padding-bottom: calc(30% - 20px);
      border-radius: 6px;
      margin: 20px;
      display: inline-block;
      text-align: center;
      line-height: 60px;
      cursor: pointer;
      transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
      background: #FFF;
      color: #FFA000;
      border: 1px solid #FFF;
      box-shadow: 0 2px 6px 0 rgba(0, 0, 0, 0.26);
      font-size: 1.5em;
      padding: 24px;
      font-weight: bold;
      /* Make the font bold */
    }

    .tile:not(.clickable) {
      cursor: not-allowed;
    }

    .tile:hover {
      transform: scale(1.05);
      box-shadow: 0 4px 12px 0 rgba(0, 0, 0, 0.26);
    }

    .tile:active {
      transform: scale(0.95);
      box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.26);
    }

    .input-container {
      width: 400px;
      margin-top: 20px;
      margin-bottom: 20px;
      display: flex;
      align-items: center;
    }

    .input-container input {
      margin-right: 10px;
      font-size: 1em;
      /* Adjust input font size */
    }

    .small-tile {
      width: calc(10% - 20px);
      height: 0;
      padding-bottom: calc(10% - 20px);
      line-height: 30px;
      font-size: 1em;
      margin: 12px;
    }

    .right-container button,
    .right-container .leaderboard,
    .right-container .calculate-button,
    .right-container .random-number,
    .right-container .copy-link-button {
      margin-bottom: 20px;
      font-size: 1.2em;
      font-weight: bold;
      /* Make button text bold */
    }

    .leaderboard {
      list-style-type: none;
      padding: 0;
      display: none;
    }

    .leaderboard th,
    .leaderboard td {
      text-align: center;
      padding: 10px;
    }

    .leaderboard tr:nth-child(even) {
      background-color: #f2f2f2;
    }

    .leaderboard-container {
      max-height: 500px;
      overflow-y: auto;
    }

    .random-number {
      font-size: 2em;
      color: #4285F4;
    }

    .voted-value-column {
      display: none;
    }
  </style>
</head>

<body>
  <div class="left-container zoomed-out-container">
    <h2>Welcome <%= username %>
    </h2>
    <h1>Admin User Interface</h1>
    <p>Admin: <%= username %>
    </p>


    <div class="btn-group" role="group" aria-label="Sequence Type">
      <button type="button" class="btn btn-secondary" onclick="updateSequences('tShirtSizes')">T-Shirt</button>
      <button type="button" class="btn btn-secondary" onclick="updateSequences('sequence1')">Seq 1</button>
      <button type="button" class="btn btn-secondary" onclick="updateSequences('sequence2')">Seq 2</button>
      <button type="button" class="btn btn-secondary" onclick="updateSequences('fibonacci')">Fibonacci</button>
      <button type="button" class="btn btn-secondary" onclick="updateSequences('custom')">Custom</button>
    </div>

    <button class="btn btn-info copy-link-button" onclick="copyToClipboard('<%= roomData.room_url %>')"
      id="copyLinkButton" disabled>Copy
      Link</button>

    <div class="input-container">
      <input type="text" id="sequenceInput" class="form-control" placeholder="Enter a value">
      <input type="text" id="descriptionInput" class="form-control" placeholder="Enter a description">
    </div>


    <div class="input-container">
      <div class="input-container">
        <label for="toggleTimer">Enable Timer: <input type="checkbox" id="toggleTimer" onchange="toggleTimer()"></label>
      </div>

      <div class="input-container">
        <label for="timerValue">Timer Value (in seconds): <input type="number" id="timerValue" class="form-control"
            disabled></label>
      </div>
    </div>




    <div id="tileContainer" class="tile-container">
    </div>
  </div>

  <div class="right-container">
    <div class="leaderboard-container zoomed-out-container">
      <table class="leaderboard table table-striped" id="leaderboard">
        <thead>
          <tr>
            <th>Joiner Name</th>
            <th>Voted</th>
            <th>Spectator</th> <!-- Add this line -->
            <th class="voted-value-column">Voted Value</th>
          </tr>
        </thead>
        <tbody></tbody>
      </table>
    </div>
    <form id="adminMessageForm" action="/send-admin-message" method="POST">
      <button type="submit" class="btn btn-primary zoomed-out-container" onclick="submitForm()" id="submitButton"
        disabled>Submit</button>
    </form>

    <button class="btn btn-success calculate-button zoomed-out-container"
      onclick="calculateAverage(randomNumber, '<%= roomData %>')" id="calculateButton" disabled>Calculate</button>
    <div class="random-number" id="randomNumber"></div>
  </div>





  <script>
    const tShirtSizes = ['XXS', 'XS', 'S', 'M', 'L', 'XL', 'XXL'];
    const sequence1 = [1, 2, 3, 4, 5];
    const sequence2 = [2, 4, 6, 8, 10];
    const fibonacci = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144];
    const custom = ['give', 'a', 'comma', 'seperated', 'string'];

    function generateFibonacci(value) {
      const sequence = [];
      let a = 0, b = 1;

      while (a < value) {
        sequence.push(a);
        const temp = a;
        a = b;
        b += temp;
      }

      return sequence;
    }

    function generateSequence2(count) {
      return Array.from({ length: count / 2 }, (_, i) => (i + 1) * 2);
    }

    let joinedPeople = [];

    let updatedSequence;

    function updateSequences(type) {
      const inputValue = document.getElementById('sequenceInput').value;
      const description = document.getElementById('descriptionInput').value;

      switch (type) {
        case 'tShirtSizes':
          updatedSequence = tShirtSizes;
          break;
        case 'sequence1':
          const seq1Count = parseInt(inputValue, 10) || 5;
          updatedSequence = Array.from({ length: seq1Count }, (_, i) => i + 1);
          break;
        case 'sequence2':
          const seq2Count = parseInt(inputValue, 10) || 10;
          updatedSequence = generateSequence2(seq2Count);
          break;
        case 'fibonacci':
          const fibonacciCount = parseInt(inputValue, 10) || 10;
          updatedSequence = generateFibonacci(fibonacciCount);
          break;
        case 'custom':
          updatedSequence = inputValue.split(',').map(item => item.trim());
          break;
        default:
          updatedSequence = [];
      }

      // Add '?' and 'üçµ' only if they are not already present in the sequence
      if (!updatedSequence.includes('?')) {
        updatedSequence.push('?');
      }
      if (!updatedSequence.includes('üçµ')) {
        updatedSequence.push('üçµ');
      }

      const tileContainer = document.getElementById('tileContainer');
      tileContainer.innerHTML = '';
      updatedSequence.forEach((value) => {
        const tile = document.createElement('div');
        tile.classList.add('tile', 'small-tile', 'clickable');
        tile.innerText = value;
        tile.addEventListener('click', () => {
          handleTileClick(tile);
        });
        tileContainer.appendChild(tile);
      });

      document.getElementById('submitButton').disabled = !canEnableSubmitButton() || description.trim() === '';
      document.getElementById('calculateButton').disabled = true;
      document.getElementById('copyLinkButton').disabled = !canEnableCopyLinkButton();
    }



    function updateLeaderboard(shouldRender = false, joinedPeople = []) {
      console.log("leaderboard data: ", joinedPeople);
      if (!shouldRender) {
        return;
      }

      document.getElementById('calculateButton').disabled = !haveAllJoinersVoted(joinedPeople);

      const leaderboard = document.getElementById('leaderboard');
      const leaderboardBody = leaderboard.querySelector('tbody');

      console.log(joinedPeople + " found");
      leaderboardBody.innerHTML = '';

      joinedPeople.forEach(person => {
        const row = document.createElement('tr');
        row.innerHTML = `
      <td>${person.joinerName}</td>
      <td>${person.voted ? '‚úÖ' : '‚ùå'}</td>
      <td>
        <label class="switch">
          <input type="checkbox" ${person.spectator ? 'checked' : ''} onchange="toggleSpectator('${person.joinerName}', this.checked)">
          <span class="slider round"></span>
        </label>
      </td>
      <td class="voted-value-column">${person.votedValue === "SpectatorEntity" ? "üïµÔ∏è" : person.votedValue}</td>
    `;
        leaderboardBody.appendChild(row);
      });

      leaderboard.style.display = 'table';
    }

    function toggleSpectator(joinerName, isChecked) {

      console.log('Received room data joinerName:', joinerName);
      console.log('Received room data isChecked:', isChecked);

      fetch('/toggle-spectator', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        // body: JSON.stringify({ joinerName, isChecked, roomUrl, username }), // Include username in the request body
        body: JSON.stringify({ joiner_Name: joinerName, is_Checked: isChecked, roomUrl: decodeHtmlEntities('<%= roomData.room_url %>') }),
      })
        .then(response => {
          if (!response.ok) {
            throw new Error(`Error toggling spectator state: ${response.statusText}`);
          }
          console.log(`Spectator state toggled successfully for ${joinerName}`);
        })
        .catch(error => {
          console.error(`Error toggling spectator state: ${error.message}`);
        });
    }




    let joinedPeopleTemp = [];

    function getVotedValuesArray() {
      const votedValuesArray = [];

      joinedPeopleTemp.forEach(person => {
        if (person.voted) {
          votedValuesArray.push(person.votedValue);
        }
      });

      return votedValuesArray;
    }


    function submitForm() {
      const leaderboard = document.getElementById('leaderboard');

      leaderboard.style.display = 'table';

      const votedValueColumns = document.querySelectorAll('.voted-value-column');
      votedValueColumns.forEach(column => {
        column.style.display = 'none';
      });

      document.getElementById('copyLinkButton').disabled = !canEnableSubmitButton();
      const sequenceString = getCurrentSequence().join(', ');
      console.log('Sequence:', sequenceString);
    }


    function haveAllJoinersVoted(joinedPeopleArr) {
      return joinedPeopleArr.length > 0 && joinedPeopleArr.every(person => person.voted);
    }

    function getCurrentSequence() {
      const tileContainer = document.getElementById('tileContainer');
      const tiles = tileContainer.getElementsByClassName('tile');
      const sequence = Array.from(tiles).map(tile => tile.innerText);
      return sequence;
    }

    function getCurrentDescription() {
      const descriptionInput = document.getElementById('descriptionInput');
      const description = descriptionInput.value.trim();
      console.log("description is ", description);
      return description;
    }




    // admin-ui.ejs
    function calculateAverage(randomNumber, roomData) {

      // Show the Voted Value column when the calculate button is pressed
      const votedValueColumns = document.querySelectorAll('.voted-value-column');
      votedValueColumns.forEach(column => {
        column.style.display = 'table-cell';
      });

      // Show the random number
      const randomNumberElement = document.getElementById('randomNumber');
      randomNumberElement.innerText = `Random Number: ${calculateAverageOrMedian(getVotedValuesArray())}`;

      // Disable the calculate button after it's pressed
      document.getElementById('calculateButton').disabled = true;

      console.log("Sending data to the server...");

      console.log(`Received message from admin: ${calculateAverageOrMedian(getVotedValuesArray())}`);
      console.log('Received room data:', decodeHtmlEntities('<%= roomData.room_url %>'));
      console.log('Received joined people data:', joinedPeopleTemp);

      // Send data to the server
      fetch('/broadcast-data', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ randomNumber: calculateAverageOrMedian(getVotedValuesArray()), roomData: decodeHtmlEntities('<%= roomData.room_url %>'), joinedPeople: joinedPeopleTemp }),
      })
        .then(response => {
          if (!response.ok) {
            throw new Error(`Error sending data to server: ${response.statusText}`);
          }
          console.log("Data sent successfully.");
        })
        .catch(error => {
          console.error(`Error sending data to server: ${error.message}`);
        });

      // Disable the "Calculate" button after sending the event
      document.getElementById('calculateButton').disabled = true;
    }



    function canEnableSubmitButton() {
      return true;
    }

    function canEnableCalculateButton() {
      return joinedPeople.every(person => person.voted);
    }

    function returnjoinedPeople() {
      return joinedPeople;
    }


    function calculateAverageOrMedian(sequence) {

      const flattenedSequence = sequence.flat();

      const filteredValues = flattenedSequence.filter(value => value !== '?' && value !== "üçµ" && value !== "SpectatorEntity" && value !== "üïµÔ∏è");

      console.log("the calculation related array :  ", filteredValues);
      const allInteger = filteredValues.every(value => !isNaN(parseInt(value, 10)));

      if (allInteger) {
        const numericArray = filteredValues.map(value => parseInt(value, 10));

        const sum = numericArray.reduce((acc, value) => acc + value, 0);
        const average = sum / filteredValues.length;

        return average;
      } else {
        console.log("No average");
        return "No average";
      }
    }





    document.addEventListener('DOMContentLoaded', () => {
      const adminMessageForm = document.getElementById('adminMessageForm');

      adminMessageForm.addEventListener('submit', async (event) => {
        event.preventDefault();

        const formData = new FormData(adminMessageForm);
        const sequenceInput = getCurrentSequence().join(', ');
        const description = getCurrentDescription();

        try {
          const response = await fetch('/send-admin-message', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ username: '<%= username %>', sequenceInput, description }),
          });

          if (!response.ok) {
            throw new Error(`Error sending admin message: ${response.statusText}`);
          }

          console.log('Admin message sent successfully.');


        } catch (error) {
          console.error(`Error sending admin message: ${error.message}`);
        }
      });
    });

    function copyToClipboard(url) {
      const el = document.createElement('textarea');
      el.value = url;
      document.body.appendChild(el);
      el.select();
      document.execCommand('copy');
      document.body.removeChild(el);
    }
  </script>
  <script>
    function decodeHtmlEntities(html) {
      var txt = document.createElement('textarea');
      txt.innerHTML = html;
      return txt.value;
    }

    const eventSource = new EventSource('/sse');

    eventSource.onmessage = async (event) => {
      const eventData = JSON.parse(event.data);

      switch (eventData.action) {
        case 'newJoiner':
          console.log(`New joiner option`);
          if (eventData.url === decodeHtmlEntities('<%= roomData.room_url %>')) {
            console.log(`New joiner: ${eventData.username}`);

            if (!roomData) {
              await new Promise(resolve => setTimeout(resolve, 4000));
              console.log('Retrying to fetch updated roomData after timeout...');

              if (!roomData) {
                console.log('Room data is still undefined after timeout.');
                return;
              }
            }

            console.log('Using updated roomData:', roomData);
          } else {
            console.log(`Not equal: ${eventData.url} and <%= roomData.room_url %>`);
          }
          break;

        case 'updateJoiners':
          console.log(`Updating joiners structure for room: ${eventData.url}`);
          console.log(`Room Creator: ${eventData.roomCreator}`);
          console.log('Updated Joiners Structure:', eventData.joinersStructure);

          // Assign the latest value to the global variable
          joinedPeopleTemp = eventData.joinersStructure;

          updateLeaderboard(true, eventData.joinersStructure);
          updateJoinersStructure(eventData.joinersStructure);
          break;

        case 'updateSequence':
          if (eventData.url === decodeHtmlEntities('<%= roomData.room_url %>')) {
            console.log(`Updating sequence for room: ${eventData.url}`);
            console.log(`Room Creator: ${eventData.roomCreator}`);
            console.log('Updated Sequence:', eventData.sequence);

            updateSequence(eventData.sequence);
          }
          break;
        default:
          console.log(`Unknown action: ${eventData.action}`);
          break;
      }
    };

    function updateJoinersStructure(joinersStructure) {
      console.log('Updated Joiners Structure in the function:', joinedPeopleTemp);
      const joinersList = document.getElementById('joinersList');
      joinersList.innerHTML = '';

      joinersStructure.forEach((joiner) => {
        const listItem = document.createElement('li');
        listItem.innerHTML = `Joiner Name: ${joiner.joinerName}, Joiner ID: ${joiner.joinerId}, Voted: ${joiner.voted}, Voted Value: ${joiner.votedValue}`;
        joinersList.appendChild(listItem);
      });
    }


    function updateSequence(sequence) {
      const sequenceElement = document.getElementById('sequence');
      if (sequenceElement) {
        sequenceElement.innerText = `Sequence: ${sequence}`;
      }
    }

    eventSource.onerror = (error) => {
      console.error('SSE Error:', error);
      eventSource.close();
    };

  </script>

</body>

</html>