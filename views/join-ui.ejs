<!-- views/join-ui.ejs -->
<!DOCTYPE html>
<html lang="en">

<head>
  <title>Join UI</title>
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-4bw+/aepP/YC94hEpVNVgiZdgIC5+VKNBQNGCHeKRQN+PtmoHDEXuppvnDJzQIu9" crossorigin="anonymous">
  <style>
    .zoomed-out-container {
      zoom: 0.8;
    }

    body {
      background-color: #928888b0;
      display: flex;
      font-family: Arial, sans-serif;
      color: #333;
    }

    .left-container {
      width: 70%;
      padding: 40px;
      position: relative;
    }

    .right-container {
      width: 30%;
      padding: 40px;
      background-color: #fff;
      min-height: 100vh;
    }

    .tile-container {
      display: flex;
      flex-wrap: wrap;
      margin: 0px;
      margin-bottom: 16px;
      overflow-y: auto;
    }

    .tile {
      width: calc(30% - 20px);
      height: 0;
      padding-bottom: calc(30% - 20px);
      border-radius: 6px;
      margin: 20px;
      display: inline-block;
      text-align: center;
      line-height: 60px;
      cursor: pointer;
      transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
      background: #FFF;
      color: hsl(38, 100%, 50%);
      border: 1px solid #FFF;
      box-shadow: 0 2px 6px 0 rgba(0, 0, 0, 0.26);
      font-size: 1.5em;
      padding-top: 50px;
      padding-bottom: 50px;
      font-weight: bold;
    }

    .tile:not(.clickable) {
      cursor: -webkit-grab;
    }

    .tile:hover {
      transform: scale(1.05);
      box-shadow: 0 4px 12px 0 rgba(0, 0, 0, 0.26);
    }

    .tile:active {
      transform: scale(0.95);
      box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.26);
    }

    .input-container {
      width: 400px;
      margin-top: 30px;
      margin-bottom: 60px;
      display: flex;
      align-items: center;
    }

    .input-container input {
      margin-right: 10px;
      font-size: 1em;
    }

    .small-tile {
      width: calc(10% - 20px);
      height: 0;
      padding-bottom: calc(10% - 20px);
      line-height: 30px;
      font-size: 1.5em;
      margin: 12px;
    }

    .right-container button,
    .right-container .leaderboard,
    .right-container .calculate-button,
    .right-container .random-number,
    .right-container .copy-link-button {
      margin-bottom: 20px;
      font-size: 1.2em;
      font-weight: bold;
    }

    .leaderboard {
      list-style-type: none;
      padding: 0;
      display: none;
    }

    .leaderboard th,
    .leaderboard td {
      text-align: center;
      padding: 10px;
    }

    .leaderboard tr:nth-child(even) {
      background-color: #f2f2f2;
    }

    .leaderboard-container {
      max-height: 500px;
    }

    .leaderboard-container-overflow {
      overflow-y: auto;
    }

    .random-number {
      font-size: 2em;
      color: #4285F4;
    }

    .voted-value-column {
      display: none;
    }

    form {
      display: none;
    }

    .timer-container {
      margin-top: 20px;
    }

    .timer-container label {
      margin-right: 10px;
    }

    .timer-container input {
      width: 60px;
      margin-right: 10px;
    }

    .timer-text {
      margin-left: 4rem;
      margin-right: 4rem;
      font-family: Arial, sans-serif;
      font-size: 48px;
      font-weight: bold;
      color: #656363;
    }

    .tile.highlighted {
      background-color: rgb(242, 215, 142);
      box-shadow: 0 0 10px rgba(229, 192, 81, 0.5);
    }

    .tile.disabled {
      opacity: 0.5;
      pointer-events: none;
      cursor: not-allowed;
    }

    .alert-container {
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      width: 300px;
      height: 200px;
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 9999;
    }

    .alert-box {
      background-color: #d6d6d5;
      padding: 20px;
      border-radius: 8px;
      box-shadow: 0 16px 16px rgba(0, 0, 0, 0.15);
      font-size: 1.5em;
      color: #333;
      width: 100%;
      height: 100%;
      display: flex;
      justify-content: space-between;
      align-items: center;
      position: relative;
    }

    .close-button {
      cursor: pointer;
      position: absolute;
      top: 5px;
      right: 5px;
      padding: 5px;
    }
  </style>
</head>

<body>
  <div class="left-container zoomed-out-container"
    style="background-image: url('/admin-joiner-main-background'); background-size: 100% auto; background-position: top;">
    <h2>Welcome <%= username %>
    </h2>
    <h1>Joiner Interface</h1>
    <div id="countdownTimer" class="timer-container timer-text">
    </div>

    <div id="tileContainer" class="tile-container"></div>
  </div>

  <div class="right-container"
    style="background-image: url('/admin-joiner-leaderboard-background'); background-size:auto 100%; background-position: left;">

    <div class="zoomed-out-container">
      <div class="description-container ">
        <h3>Description</h3>
        <p id="descriptionText"></p>
      </div>
      <table class="leaderboard-container-overflow leaderboard table table-striped" id="leaderboard">
        <thead>
          <tr>
            <th>Joiner Name</th>
            <th>Voted</th>
            <th class="voted-value-column">Voted Value</th>
          </tr>
        </thead>
        <tbody></tbody>
      </table>
    </div>
    <div class="random-number" id="randomNumber"></div>
  </div>

  <div class="alert-container" id="alertContainer" style="display: none;">
    <div class="alert-box">
      <div>New voting session has started</div>
      <span class="close-button" onclick="closeAlert1()">Close</span>
    </div>
  </div>

  <form id="joinForm" action="/send-join-message" method="POST" className="hiddenOne">
    <input type="hidden" name="roomData" value='<%= JSON.stringify(roomData) %>'>
    <input type="hidden" name="username" value='<%= username %>'>

    <label type="hidden" for="joinMessage">Enter Message:</label>
    <input type="hidden" type="text" id="joinMessage" name="joinMessage" required>
    <button type="hidden" type="submit">Send</button>
  </form>


  <script>
    let sessionOn = true;
    let tilesClickable = true;
    let timerInterval;
    let timerFrozen = false;


    function populateDescription(description) {
      const descriptionText = document.getElementById('descriptionText');
      descriptionText.innerText = description;
    }

    function generateTilesFromSequence(sequence, spectator) {
      const tileContainer = document.getElementById('tileContainer');
      tileContainer.innerHTML = '';

      const formattedString = sequence.replace(/\s*,\s*/g, ',');
      const resultArray2 = formattedString.split(',');
      const finalArray2 = resultArray2.slice(0, -2);

      const finalArray3 = [];

      const encounteredElements = {};

      for (const element of finalArray2) {
        if (!encounteredElements[element]) {
          finalArray3.push(element);
          encounteredElements[element] = true;
        }
      }

      finalArray3.push('?');
      finalArray3.push('üçµ');

      finalArray3.forEach((value) => {
        const tile = document.createElement('div');
        tile.classList.add('tile', 'small-tile');
        tile.innerText = value.trim();
        tile.setAttribute('data-content', value.trim());
        tileContainer.appendChild(tile);
        tile.addEventListener('click', () => handleTileClick(value.trim(), spectator));
      });

    }


    function populatePage() {
      const sequenceData = '<%= roomData.sequence %>';
      generateTilesFromSequence(sequenceData, false);
      populateDescription('<%= roomData.description %>');


      const isChecked = decodeHtmlEntities('<%= roomData.timer_enabled %>') === "true";
      const timestamp = decodeHtmlEntities('<%= roomData.timestamp %>');
      const timerValue = decodeHtmlEntities('<%= roomData.timer_value %>');

      if (isChecked && timerValue > 0) {
        timerIntervalId = startCountdownTimer('countdownTimer', timestamp, timerValue);
      }
    }

    function populateLeaderboard() {
      const leaderboard = document.getElementById('leaderboard');
      const leaderboardBody = leaderboard.querySelector('tbody');

      leaderboardBody.innerHTML = '';

      joinedPeople.forEach(person => {
        const row = document.createElement('tr');
        row.innerHTML = `
                    <td>${person.joinerName}</td>
                    <td>${person.voted ? '‚úÖ' : '‚ùå'}</td>
                    <td class="voted-value-column">${person.votedValue}</td>
                `;
        leaderboardBody.appendChild(row);
      });
      leaderboard.style.display = 'table';
    }

    function closeAlert1() {
      document.getElementById('alertContainer').style.display = 'none';
    }

    function displayRandomNumber(getRandomNumber) {
      const randomNumberElement = document.getElementById('randomNumber');
      randomNumberElement.innerText = `Average : ${getRandomNumber}`;
    }

    function startCountdownTimer(timerId, timestamp, timerValue) {
      const timerElement = document.getElementById(timerId);



      const currentTimestamp = new Date().getTime();
      const timeGap = currentTimestamp - timestamp;
      const startTime = Math.max(timeGap, 0);
      const targetTimestamp = timerValue * 1000;

      timerInterval = setInterval(() => {
        if (!timerFrozen) {
          const currentTimestampInterval = new Date().getTime();

          const remainingTime = Math.max(targetTimestamp - startTime - (currentTimestampInterval - currentTimestamp), 0);

          const hours = Math.floor(remainingTime / (1000 * 60 * 60));
          const minutes = Math.floor((remainingTime % (1000 * 60 * 60)) / (1000 * 60));
          const seconds = Math.floor((remainingTime % (1000 * 60)) / 1000);

          if (hours == 0 && minutes == 0 && seconds == 0) {
            setTime = false;
          } else {
            setTime = true;
          }

          timerElement.innerText = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
          if (remainingTime === 0) {
            clearInterval(timerInterval);
            timerElement.innerText = 'Timer expired!';
          }
        }
      }, 1000);
    }

    function stopCountdownTimer() {
      clearInterval(timerInterval);
    }

    async function handleTileClick(tileContent, spectator = false) {
      const formData = new FormData(joinForm);
      let joinMessage = tileContent;

      if (!tilesClickable) {
        console.log('Tiles are disabled.');
        return;
      }

      if (spectator) {
        joinMessage = "SpectatorEntity";
      }

      const roomData = formData.get('roomData');
      const username = formData.get('username');
      console.log('Tile Clicked:', tileContent);

      const allTiles = document.querySelectorAll('.tile');
      const clickedTile = document.querySelector(`.tile[data-content="${tileContent}"]`);

      if (clickedTile.classList.contains('disabled')) {
        console.log('Tile is disabled.');
        return;
      }

      try {
        const response = await fetch('/send-join-message', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ username, joinMessage, roomData, isAdmin: "false" }),
        });

        if (!response.ok) {
          throw new Error(`Error sending join message: ${response.statusText}`);
        }

        console.log('Join message sent successfully.');

        allTiles.forEach(tile => {
          tile.classList.remove('highlighted');
        });

        clickedTile.classList.add('highlighted');

      } catch (error) {
        console.error(`Error sending join message: ${error.message}`);
      }
    }



    window.onload = populatePage;

    function decodeHtmlEntities(html) {
      var txt = document.createElement('textarea');
      txt.innerHTML = html;
      return txt.value;
    }


    async function updatePage(eventData) {
      switch (eventData.action) {
        case 'newJoiner':
          console.log(`New joiner option`);
          if (eventData.url === decodeHtmlEntities('<%= roomData.room_url %>')) {
            console.log(`New joiner: ${eventData.username}`);

            if (!roomData) {
              await new Promise(resolve => setTimeout(resolve, 4000));

              console.log('Retrying to fetch updated roomData after timeout...');

              if (!roomData) {
                console.log('Room data is still undefined after timeout.');
                return;
              }
            }

            console.log('Using updated roomData:', roomData);
          } else {
            console.log(`Not equal: ${eventData.url} and <%= roomData.room_url %>`);
          }
          break;

        case 'updateJoiners':
          console.log(`New joiner option`);
          if (eventData.url === decodeHtmlEntities('<%= roomData.room_url %>')) {
            updateLeaderboard(true, eventData.joinersStructure);
            const sequenceData = '<%= roomData.sequence %>';

            console.log("IsTimerEnabled Value is : ", eventData.isTimerEnabled);
          }
          break;

        case 'adminEvent':
          if (eventData.roomData === decodeHtmlEntities('<%= roomData.room_url %>')) {
            updateLeaderboardAfterCalculate(true, eventData.joinedPeople, eventData.randomNumber);
            displayRandomNumber(eventData.randomNumber);

          }

          break;
        case 'newSession':
          if (eventData.roomData === decodeHtmlEntities('<%= roomData.room_url %>')) {
            document.getElementById('alertContainer').style.display = 'flex';

            handleNewSessionEvent(eventData);

          }

          break;

        default:
          console.log(`Unknown action: ${eventData.action}`);
          break;
      }
    }

    const eventSource = new EventSource('/sse');

    eventSource.onmessage = async (event) => {
      const eventData = JSON.parse(event.data);

      if (sessionOn) {
        updatePage(eventData);
      }

      switch (eventData.action) {
        case 'newSession':
          if (eventData.roomData === decodeHtmlEntities('<%= roomData.room_url %>')) {
            sessionOn = true;
            // stopCountdownTimer();
            document.getElementById('alertContainer').style.display = 'flex';
            setTimeout(() => {
              closeAlert1();
            }, 3000);
            handleNewSessionEvent(eventData);

          }

          break;

        default:
          console.log(`Unknown action: ${eventData.action}`);
          break;
      }

    };



    function updateLeaderboard(shouldRender = false, joinedPeople = []) {
      if (!shouldRender) {
        return;
      }


      const leaderboard = document.getElementById('leaderboard');
      const leaderboardBody = leaderboard.querySelector('tbody');

      console.log(joinedPeople + " found");
      leaderboardBody.innerHTML = '';

      joinedPeople.forEach(person => {
        const row = document.createElement('tr');
        row.innerHTML = `
        <td>${person.joinerName}</td>
        <td>${person.voted ? '‚úÖ' : '‚ùå'}</td>
        <td class="voted-value-column">${person.votedValue === "SpectatorEntity" ? "üïµÔ∏è" : person.voted ? person.votedValue : "‚õî"}</td>
    `;
        leaderboardBody.appendChild(row);
      });

      leaderboard.style.display = 'table';
    }

    function updateLeaderboardAfterCalculate(shouldRender = false, joinedPeople = []) {
      if (!shouldRender) {
        return;
      }

      const leaderboard = document.getElementById('leaderboard');
      const leaderboardBody = leaderboard.querySelector('tbody');

      leaderboardBody.innerHTML = '';

      joinedPeople.forEach(person => {
        const row = document.createElement('tr');
        row.innerHTML = `
    <td>${person.joinerName}</td>
    <td>${person.voted ? '‚úÖ' : '‚ùå'}</td>
    <td>${person.votedValue === "SpectatorEntity" ? "üïµÔ∏è" : person.votedValue}</td>
  `;
        leaderboardBody.appendChild(row);
      });

      leaderboard.style.display = 'table';

      freezePage();
    }



    function freezePage() {
      sessionOn = false;
      disableTiles();
      freezeTimer();
    }

    function unfreezePage() {
      sessionOn = true;
      enableTiles();
      unfreezeTimer();
    }

    function disableTiles() {
      tilesClickable = false;



      const allTiles = document.querySelectorAll('.tile');
      allTiles.forEach(tile => {
        tile.classList.add('disabled');
        tile.removeAttribute('onclick');
      });
    }

    function enableTiles() {
      tilesClickable = true;

      const allTiles = document.querySelectorAll('.tile');
      allTiles.forEach(tile => {
        tile.classList.remove('disabled');
        tile.setAttribute('onclick', 'handleTileClick(this.dataset.content)');
      });
    }

    function freezeTimer() {
      timerFrozen = true;
    }

    function unfreezeTimer() {
      timerFrozen = false;
    }

    function handleNewSessionEvent(eventData) {
      unfreezePage();

      rerenderUI(
        eventData.sequenceData,
        eventData.joinedPeopleData,
        eventData.description,
        eventData.timer_enabled,
        eventData.timer_value,
        eventData.timestamp,
      );

      // Pass the new timer value and timestamp to start the timer
      const isChecked = eventData.timer_enabled === "true";
      const timerValue = parseInt(eventData.timer_value);
      const timestamp = parseInt(eventData.timestamp);
      console.error('isChecked:', isChecked);
      console.error('timerValue:', timerValue);
      console.error('timestamp:', timestamp);
      // stopCountdownTimer();
      if (isChecked && timerValue > 0) {
        startCountdownTimer('countdownTimer', timestamp, timerValue);
      }
    }

    function rerenderUI(sequenceData, joinedPeopleData, description, timer_enabled, timer_value, timestamp) {
      console.log(sequenceData);
      generateTilesFromSequence(sequenceData, false);
      populateDescription(description);
      updateLeaderboard(true, joinedPeopleData);
      isChecked = timer_enabled;
      timerValue = timer_value;
      timestamp = timestamp;
      startCountdownTimer(isChecked, timestamp, timerValue);
      const randomNumberElement = document.getElementById('randomNumber');
      randomNumberElement.innerText = ``;
    }

    function updateJoinersStructure(joinersStructure) {
      const joinersList = document.getElementById('joinersList');
      joinersList.innerHTML = '';

      joinersStructure.forEach((joiner) => {
        const listItem = document.createElement('li');
        listItem.innerHTML = `Joiner Name: ${joiner.joinerName}, Joiner ID: ${joiner.joinerId}, Voted: ${joiner.voted}, Voted Value: ${joiner.votedValue}`;
        joinersList.appendChild(listItem);
      });
    }

    eventSource.onerror = (error) => {
      console.error('SSE Error:', error);
      eventSource.close();
    };



    window.addEventListener('beforeunload', function (event) {
      const roomData = decodeHtmlEntities('<%= roomData %>');
      const room_url = decodeHtmlEntities('<%= roomData.room_url %>');
      const username = decodeHtmlEntities('<%= username %>');

      fetch('/userClosedTab', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ roomData: roomData, room_url: room_url, username: username })
      })
        .then(response => {
          if (response.ok) {
            console.log('Message sent to backend');
          } else {
            console.error('Failed to send message to backend');
          }
        })
        .catch(error => {
          console.error('Error:', error);
        });
    });
  </script>
</body>

</html>