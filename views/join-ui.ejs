<!-- views/join-ui.ejs -->
<!DOCTYPE html>
<html lang="en">

<head>
  <!-- ... (head section remains unchanged) ... -->
</head>

<body>
  <h1>Welcome <%= username %> to the Join UI</h1>

  <!-- Display User Details -->
  <h2>User Details:</h2>
  <p>Username: <%= username %>
  </p>
  <!-- Display Room Data -->
  <p>Room URL: <%= roomData.room_url %>
  </p>
  <p>Room Owne: <%= roomData.room_creator_username %>
  </p>
  <p>Joiners: <%= roomData.joiners %>
  </p>
  <p>Sequence: <%= roomData.sequence %>
  </p>

  <!-- Display User Messages -->
  <h2>User Messages:</h2>
  <ul>
    <% userMessages.forEach((message)=> { %>
      <li>
        <%= message %>
      </li>
      <% }); %>
  </ul>

  <!-- Messaging Form -->
  <form id="joinForm" action="/send-join-message" method="POST">
    <!-- Hidden input fields to include room data and username -->
    <input type="hidden" name="roomData" value='<%= JSON.stringify(roomData) %>'>
    <input type="hidden" name="username" value='<%= username %>'>

    <label for="joinMessage">Enter Message:</label>
    <input type="text" id="joinMessage" name="joinMessage" required>
    <button type="submit">Send</button>
  </form>

  <!-- Display Join Messages -->
  <ul id="joinMessages">
    <% userMessages.forEach((message)=> { %>
      <li>
        <%= message %>
      </li>
      <% }); %>
  </ul>
  <script>
    // Use JavaScript to handle form submission asynchronously
    document.addEventListener('DOMContentLoaded', () => {
      const joinForm = document.getElementById('joinForm');

      joinForm.addEventListener('submit', async (event) => {
        event.preventDefault(); // Prevent the default form submission behavior

        const formData = new FormData(joinForm);
        const joinMessage = formData.get('joinMessage');
        const roomData = formData.get('roomData');
        const username = formData.get('username');

        try {
          const response = await fetch('/send-join-message', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ username, joinMessage, roomData }),
          });

          if (!response.ok) {
            throw new Error(`Error sending join message: ${response.statusText}`);
          }

          console.log('Join message sent successfully.');

          // You can perform additional actions based on the response if needed

        } catch (error) {
          console.error(`Error sending join message: ${error.message}`);
        }
      });
    });

  </script>
  <script>
    function decodeHtmlEntities(html) {
      var txt = document.createElement('textarea');
      txt.innerHTML = html;
      return txt.value;
    }

    const eventSource = new EventSource('/sse');

    // eventSource.onmessage = async (event) => {
    //   const eventData = JSON.parse(event.data);





    //   if (eventData.action === 'newJoiner') {
    //     console.log(`New joiner option`);
    //     // Check if the URLs match before printing to the console
    //     if (eventData.url === decodeHtmlEntities('<%= roomData.room_url %>')) {
    //       console.log(`New joiner: ${eventData.username}`);

    //       // Retry fetching the updated roomData after a timeout if it's still undefined
    //       if (!roomData) {
    //         await new Promise(resolve => setTimeout(resolve, 4000)); // 4 seconds timeout
    //         // Fetch the updated room data here
    //         // roomData = ...
    //         console.log('Retrying to fetch updated roomData after timeout...');

    //         // If roomData is still undefined after the timeout, you can handle it accordingly
    //         if (!roomData) {
    //           console.log('Room data is still undefined after timeout.');
    //           return;
    //         }
    //       }

    //       // Now you can use the updated roomData
    //       console.log('Using updated roomData:', roomData);
    //     } else {
    //       console.log(`Not equal: ${eventData.url} and <%= roomData.room_url %>`);
    //     }
    //   }
    // };



  // SSE event listener for handling 'updateJoiners' event
  eventSource.onmessage = async (event) => {
    const eventData = JSON.parse(event.data);
    
    switch (eventData.action) {
      case 'newJoiner':
        console.log(`New joiner option`);
        if (eventData.url === decodeHtmlEntities('<%= roomData.room_url %>')) {
          console.log(`New joiner: ${eventData.username}`);

          // Retry fetching the updated roomData after a timeout if it's still undefined
          if (!roomData) {
            await new Promise(resolve => setTimeout(resolve, 4000)); // 4 seconds timeout
            // Fetch the updated room data here
            // roomData = ...
            console.log('Retrying to fetch updated roomData after timeout...');

            // If roomData is still undefined after the timeout, you can handle it accordingly
            if (!roomData) {
              console.log('Room data is still undefined after timeout.');
              return;
            }
          }

          // Now you can use the updated roomData
          console.log('Using updated roomData:', roomData);
        } else {
          console.log(`Not equal: ${eventData.url} and <%= roomData.room_url %>`);
        }
        break;

      case 'updateJoiners':
        console.log(`Updating joiners structure for room: ${eventData.url}`);
        console.log(`Room Creator: ${eventData.roomCreator}`);
        console.log('Updated Joiners Structure:', eventData.joinersStructure);
        // Update the UI with the new joiners structure
        updateJoinersStructure(eventData.joinersStructure);
        break;

      default:
        console.log(`Unknown action: ${eventData.action}`);
        break;
    }
  };






    // Function to update the UI with the new joiners structure
    function updateJoinersStructure(joinersStructure) {
      // Clear the existing joiners list
      const joinersList = document.getElementById('joinersList');
      joinersList.innerHTML = '';

      // Iterate through the new joiners structure and append to the list
      joinersStructure.forEach((joiner) => {
        const listItem = document.createElement('li');
        listItem.innerHTML = `Joiner Name: ${joiner.joinerName}, Joiner ID: ${joiner.joinerId}, Voted: ${joiner.voted}, Voted Value: ${joiner.votedValue}`;
        joinersList.appendChild(listItem);
      });
    }

    eventSource.onerror = (error) => {
      console.error('SSE Error:', error);
      eventSource.close();
    };
  </script>
</body>

</html>